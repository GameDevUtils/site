version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.4.1-node
    environment:
      - NOKOGIRI_USE_SYSTEM_LIBRARIES: true
    branches:
      only:
        - master
    steps:
      - checkout
      
# --- Install Tools ---

      - run:
          name: ensure cmake is installed (assumes debian image)
          command: |
            sudo apt-get install cmake

      - run: # https://github.com/igorshubovych/markdownlint-cli
          name: ensure markdownlint is installed
          command: |
            sudo npm install -g markdownlint-cli@0.5.0
            markdownlint --version

      - run: # https://github.com/DealerDirect/liquid-linter-cli
          name: ensure liquid-linter is installed
          command: |
            sudo npm install -g liquid-linter-cli@0.3.0
            liquid-linter --version

      - run: # http://stylelint.io/
          name: ensure stylelint is installed
          command: |
            sudo npm install -g stylelint@8.3.1
            stylelint --version

      - run: # https://eslint.org/
          name: ensure eslint is installed
          command: |
            sudo npm install -g eslint@4.12.1
            eslint --version
            sudo npm install -g eslint-plugin-react@7.5.1
            sudo npm install -g eslint-config-google@0.9.1

      - run: # dependency for gem install bundler
          name: ensure commonmarker is installed
          command: |
            cd docs/
            gem install commonmarker -v '0.17.6'

      - run:
          name: ensure bundler is up-to-date
          command: gem install bundler

      - run: # https://github.com/github/pages-gem ][ https://github.com/gjtorikian/html-proofer
          name: ensure Jekyll and html-proofer is installed
          command: |
            cd docs/
            bundle install
            
# --- Run Linters ---

      - run:
          name: validate markdown
          command: |
            LINT_ERROR_COUNT=0 && for e in "markdown" "md"; do SUM=0 && echo "Searching for '*.$e' ..." && for f in $(find . -name "*.$e" -not -path './node_modules/*' -not -path './_sites/*'); do echo "Validating '$f' ..." && ./node_modules/.bin/markdownlint "$f" && : || SUM=$(( SUM + 1 )); done && if [ $SUM -gt 0 ]; then LINT_ERROR_COUNT=$(( LINT_ERROR_COUNT + SUM )); fi; done; if [ $LINT_ERROR_COUNT -gt 0 ]; then echo "There were $LINT_ERROR_COUNT errors!" && echo "ERROR: Exited with code 1" && (exit 1); else echo "Success!"; fi

      - run:
          name: validate liquid template
          command: |
            LINT_ERROR_COUNT=0 && for p in $(find ./docs -type d -not -path './docs/_site' -not -path './docs/_site/*'); do ./node_modules/.bin/liquid-linter --custom-tag "seo" "$p" && : || LINT_ERROR_COUNT=$(( LINT_ERROR_COUNT + 1 )); done && if [ $LINT_ERROR_COUNT -gt 0 ]; then echo "There were $LINT_ERROR_COUNT errors!" && echo "ERROR: Exited with code 1"; else echo "Success!"; fi

      - run:
          name: build static pages
          command: |
            cd docs/
            bundle exec jekyll build

      - run:
          name: validate static html pages
          command: |
            bundle exec htmlproofer ./docs/_site --only-4xx --check-favicon --check-html

      - run:
          name: validate css
          command: |
            stylelint docs/_site/**/*.css

      - run:
          name: validate js, es, and jsx
          command: |
            eslint --env browser docs/

      # TODO - ADD to CI (?): accessibility checker [https://github.com/pa11y/pa11y-ci]

# --- Run Tests ---

      # TODO - ADD to BUILD (!): coverage (as npm run script / as CI)
      # TODO - ADD to BUILD (?): css reset (as npm run script) [https://github.com/necolas/normalize.css]
      # TODO - ADD to BUILD (?): prettifier (as npm run script) [ ??? ]

